// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoDenuncia {
  PARTIDA_ESPECIFICA
  ESQUEMA_DE_MANIPULACAO
}

enum ComoSoube {
  VITIMA
  TERCEIROS
  INTERNET
  PRESENCIAL
  OBSERVACAO
  OUTROS
}

enum PontualOuDisseminado {
  PONTUAL
  DISSEMINADO
}

enum Frequencia {
  ISOLADO
  FREQUENTE
}

enum FocoManipulacao {
  ATLETAS_DIRIGENTES_COMISSAO
  APOSTADORES
  JUIZES
}

enum TipoEvidencia {
  DOCUMENTO
  IMAGEM
  VIDEO
  AUDIO
  OUTRO
}

model Denuncia {
  id                   String               @id @default(uuid()) @db.Uuid
  tipoDenuncia         TipoDenuncia
  descricao            String
  comoSoube            ComoSoube?
  pontualOuDisseminado PontualOuDisseminado @default(PONTUAL)
  frequencia           Frequencia           @default(ISOLADO)
  dataDenuncia         DateTime             @default(now())

  partidas          Partida[]
  clubesEnvolvidos  Clube[]
  pessoasEnvolvidas Pessoa[]
  focosManipulacao  DenunciaFoco[]
  evidencias        Evidencia[]

  municipio String
  uf        String
}

model Partida {
  id String @id @default(uuid()) @db.Uuid
  
  torneio        String
  dataPartida    DateTime
  localPartida   String
  timeA          String?
  timeB          String?
  observacoes    String?
  
  denuncia   Denuncia  @relation(fields: [denunciaId], references: [id], onDelete: Cascade)
  denunciaId String    @db.Uuid
  
  municipio String
  uf        String
}

model Pessoa {
  id String @id @default(uuid()) @db.Uuid

  nomePessoa String
  funcaoPessoa String
  // documentoPessoa String

  Denuncia   Denuncia? @relation(fields: [denunciaId], references: [id])
  denunciaId String?   @db.Uuid
}

model Clube {
  id String @id @default(uuid()) @db.Uuid

  nomeClube String

  Denuncia   Denuncia? @relation(fields: [denunciaId], references: [id])
  denunciaId String?   @db.Uuid
}

model DenunciaFoco {
  id String @id @default(uuid()) @db.Uuid
  
  denuncia   Denuncia        @relation(fields: [denunciaId], references: [id], onDelete: Cascade)
  denunciaId String          @db.Uuid
  foco       FocoManipulacao

  @@unique([denunciaId, foco])
}

model Evidencia {
  id String @id @default(uuid()) @db.Uuid
  
  nomeOriginal    String
  nomeArquivo     String        // Nome do arquivo no storage
  caminhoArquivo  String        // Caminho completo do arquivo
  tamanhoBytes    Int
  mimeType        String
  tipo            TipoEvidencia
  descricao       String?       // Descrição opcional da evidência
  dataUpload      DateTime      @default(now())
  
  denuncia   Denuncia @relation(fields: [denunciaId], references: [id], onDelete: Cascade)
  denunciaId String   @db.Uuid
}

// model User {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   email     String   @unique
//   name      String?
// }
